---
export interface Props {
	title?: string;
	subtitle?: string;
	description?: string;
	testimonials?: {
		name: string;
		location: string;
		rating: number;
		comment: string;
		avatar: string;
	}[];
	partnerLogos?: {
		name: string;
		logo: string;
		alt: string;
	}[];
	backgroundColor?: string;
	textColor?: string;
	containerMaxWidth?: string;
}

const {
	title = "Recomendados por mais de 5.000 clientes!",
	subtitle = "",
	description = "Lorem ipsum dolor sit amet consectetur. Aliquet malesuada tellus viverra ultricies egestas sociis gravida sem. Enim elit massa ullamcorper erat.",
	testimonials = [
		{
			name: "João Silva",
			location: "NOVA YORK",
			rating: 5,
			comment: "Lorem ipsum dolor sit amet consectetur. Aliquet malesuada tellus viverra ultricies egestas sociis gravida sem. Enim elit massa ullamcorper erat.",
			avatar: "/api/placeholder/60/60"
		},
		{
			name: "Maria Santos",
			location: "PARIS",
			rating: 5,
			comment: "Experiência incrível! A viagem superou todas as expectativas. Atendimento excepcional e destinos maravilhosos.",
			avatar: "/api/placeholder/60/60"
		},
		{
			name: "Pedro Costa",
			location: "TÓQUIO",
			rating: 5,
			comment: "Organização perfeita, guias experientes e momentos inesquecíveis. Recomendo para todos que buscam aventura.",
			avatar: "/api/placeholder/60/60"
		}
	],
	partnerLogos = [
		{ name: "TripAdvisor", logo: "/api/placeholder/120/40", alt: "TripAdvisor" },
		{ name: "Expedia", logo: "/api/placeholder/120/40", alt: "Expedia" },
		{ name: "Booking.com", logo: "/api/placeholder/120/40", alt: "Booking.com" },
		{ name: "Airbnb", logo: "/api/placeholder/120/40", alt: "Airbnb" }
	],
	backgroundColor = "#f8fafc",
	textColor = "#1f2937",
	containerMaxWidth = "1200px"
} = Astro.props;
---

<section id="testimonials" class="testimonials-section" style={`background-color: ${backgroundColor}; color: ${textColor};`}>
	<div class="container" style={`max-width: ${containerMaxWidth};`}>
		<div class="content-wrapper">
			<!-- Seção de Título -->
			<div class="title-section">
				{subtitle && <p class="subtitle">{subtitle}</p>}
				<h2 class="main-title">{title}</h2>
				{description && <p class="description">{description}</p>}
			</div>

			<!-- Seção de Depoimentos -->
			<div class="testimonials-section-content">
				<div class="testimonials-carousel">
					<div class="testimonials-track" id="testimonialsTrack">
						{testimonials.map((testimonial, index) => (
							<div class="testimonial-card" data-index={index}>
								<div class="testimonial-header">
									<div class="location-badge">
										<svg width="12" height="12" viewBox="0 0 24 24" fill="none">
											<path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
											<circle cx="12" cy="10" r="3" stroke="currentColor" stroke-width="2"/>
										</svg>
										{testimonial.location}
									</div>
									<div class="rating">
										<span class="rating-number">{testimonial.rating}</span>
										<div class="stars">
											{Array.from({ length: 5 }, (_, i) => (
												<span class={`star ${i < testimonial.rating ? 'filled' : ''}`}>★</span>
											))}
										</div>
									</div>
								</div>
								<div class="testimonial-content">
									<p class="comment">"{testimonial.comment}"</p>
									<div class="author">
										<img src={testimonial.avatar} alt={testimonial.name} class="avatar" />
										<span class="name">{testimonial.name}</span>
									</div>
								</div>
							</div>
						))}
					</div>
					
					<!-- Controles do Carousel -->
					<div class="carousel-controls">
						<button class="carousel-btn prev" id="prevBtn">
							<svg width="20" height="20" viewBox="0 0 24 24" fill="none">
								<path d="M15 18l-6-6 6-6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
							</svg>
						</button>
						<button class="carousel-btn next" id="nextBtn">
							<svg width="20" height="20" viewBox="0 0 24 24" fill="none">
								<path d="M9 18l6-6-6-6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
							</svg>
						</button>
					</div>
				</div>
			</div>
		</div>

		<!-- Seção de Parceiros -->
		{partnerLogos && partnerLogos.length > 0 && (
			<div class="partners-section">
				<div class="partners-grid">
					{partnerLogos.map((partner) => (
						<div class="partner-logo">
							<img src={partner.logo} alt={partner.alt} />
						</div>
					))}
				</div>
			</div>
		)}
	</div>
</section>

<style>
	:root {
		--brand-color: #10b981;
		--star-color: #fbbf24;
		--text-primary: #1f2937;
		--text-secondary: #4b5563;
		--text-light: #6b7280;
		--surface-bg: white;
		--border-color: #e5e7eb;
	}

	.testimonials-section {
		padding: clamp(2rem, 5vw, 4rem) 0;
		position: relative;
		scroll-margin-top: 120px;
		transform: translateZ(0);
	}

	.container {
		margin: 0 auto;
		padding: 0 clamp(1rem, 5vw, 2rem);
		box-sizing: border-box;
	}

	.content-wrapper {
		display: grid;
		grid-template-columns: 1fr;
		gap: 2rem;
		align-items: center;
		margin-bottom: clamp(2rem, 5vw, 4rem);
		text-align: center;
	}

	.title-section {
		max-width: 600px;
		margin: 0 auto;
	}

	.subtitle {
		color: var(--brand-color);
		font-weight: 600;
		margin-bottom: 0.5rem;
		font-size: 0.9rem;
		text-transform: uppercase;
		letter-spacing: 0.5px;
	}

	.main-title {
		font-size: clamp(1.75rem, 5vw, 2.5rem);
		font-weight: 700;
		line-height: 1.2;
		margin-bottom: 1rem;
		color: inherit;
	}

	.description {
		font-size: clamp(0.95rem, 2vw, 1.1rem);
		line-height: 1.6;
		color: var(--text-light);
		margin: 0 auto;
		max-width: 90%;
	}

	.testimonials-section-content {
		position: relative;
		width: 100%;
		overflow: hidden;
	}

	.testimonials-carousel {
		position: relative;
		overflow: hidden;
		border-radius: 16px;
	}

	.testimonials-track {
		display: flex;
		transition: transform 0.5s ease;
		cursor: grab;
		user-select: none;
		-webkit-user-select: none;
		will-change: transform;
		backface-visibility: hidden;
	}

	.testimonials-track:active {
		cursor: grabbing;
	}

	.testimonial-card {
		flex: 0 0 100%;
		min-width: 0;
		background: var(--surface-bg);
		border-radius: 16px;
		padding: clamp(1.25rem, 5vw, 2rem);
		box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
		border: 1px solid var(--border-color);
		box-sizing: border-box;
	}

	.testimonial-header {
		display: flex;
		flex-wrap: wrap;
		justify-content: space-between;
		align-items: center;
		gap: 1rem;
		margin-bottom: 1.5rem;
	}

	.location-badge {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		background: #f3f4f6;
		padding: 0.5rem 1rem;
		border-radius: 20px;
		font-size: 0.8rem;
		font-weight: 600;
		color: #374151;
	}

	.location-badge svg {
		color: var(--brand-color);
	}

	.rating {
		display: flex;
		align-items: center;
		gap: 0.5rem;
	}

	.rating-number {
		font-weight: 700;
		font-size: 1.1rem;
		color: var(--text-primary);
	}

	.stars {
		display: flex;
		gap: 0.2rem;
	}

	.star {
		color: #d1d5db;
		font-size: 1.2rem;
	}

	.star.filled {
		color: var(--star-color);
	}

	.comment {
		font-size: clamp(0.9rem, 2vw, 1rem);
		line-height: 1.6;
		color: var(--text-secondary);
		margin-bottom: 1.5rem;
		font-style: italic;
		text-align: left;
	}

	.author {
		display: flex;
		align-items: center;
		gap: 1rem;
		text-align: left;
	}

	.avatar {
		width: 50px;
		height: 50px;
		border-radius: 50%;
		object-fit: cover;
		border: 3px solid var(--brand-color);
	}

	.name {
		font-weight: 600;
		color: var(--text-primary);
	}

	.carousel-controls {
		display: flex;
		justify-content: center;
		gap: 1rem;
		margin-top: 2rem;
	}

	.carousel-btn {
		width: 50px;
		height: 50px;
		border-radius: 50%;
		border: 2px solid var(--border-color);
		background: var(--surface-bg);
		color: var(--text-light);
		cursor: pointer;
		transition: all 0.3s ease;
		display: flex;
		align-items: center;
		justify-content: center;
		-webkit-tap-highlight-color: transparent;
	}

	.carousel-btn:hover:not(:disabled) {
		border-color: var(--brand-color);
		color: var(--brand-color);
		transform: translateY(-2px);
		box-shadow: 0 4px 12px rgba(16, 185, 129, 0.2);
	}

	.carousel-btn:disabled {
		opacity: 0.5;
		cursor: not-allowed;
	}

	.partners-section {
		border-top: 1px solid var(--border-color);
		padding-top: clamp(2rem, 5vw, 3rem);
		margin-top: clamp(2rem, 5vw, 3rem);
	}

	.partners-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
		gap: 2rem;
		align-items: center;
		justify-items: center;
	}

	.partner-logo {
		opacity: 0.6;
		transition: opacity 0.3s ease;
	}

	.partner-logo:hover {
		opacity: 1;
	}

	.partner-logo img {
		max-height: 40px;
		max-width: 120px;
		object-fit: contain;
		filter: grayscale(100%);
		transition: filter 0.3s ease;
	}

	.partner-logo:hover img {
		filter: grayscale(0%);
	}

	@media (min-width: 769px) {
		.content-wrapper {
			grid-template-columns: 1fr 1fr;
			text-align: left;
			gap: 4rem;
		}
		.title-section {
			margin: 0;
		}
		.description {
			margin: 0;
			max-width: 100%;
		}
	}

	@media (hover: none) and (pointer: coarse) {
		.carousel-btn {
			min-width: 48px;
			min-height: 48px;
			touch-action: manipulation;
		}
		.carousel-btn:hover {
			transform: none;
			box-shadow: none;
		}
		.carousel-btn:active {
			background-color: #f3f4f6;
			border-color: var(--brand-color);
			color: var(--brand-color);
		}
		.testimonials-track {
			-webkit-overflow-scrolling: touch;
		}
		.testimonial-card, .testimonials-track {
			touch-action: pan-y;
		}
	}
</style>

<script>
	class TestimonialsCarousel {
		constructor(carouselElement) {
			this.carouselElement = carouselElement;
			this.track = this.carouselElement.querySelector('#testimonialsTrack');
			this.prevBtn = this.carouselElement.querySelector('#prevBtn');
			this.nextBtn = this.carouselElement.querySelector('#nextBtn');
			this.cards = [...this.track.children];
			this.totalCards = this.cards.length;
			this.currentIndex = 0;
			this.autoPlayInterval = null;
			this.isAutoPlaying = true;
			this.isDragging = false;
			this.startX = 0;
			this.currentX = 0;
			this.dragThreshold = 50; // Min drag distance to trigger slide

			if (!this.track || !this.prevBtn || !this.nextBtn || this.totalCards === 0) {
				console.error('TestimonialsCarousel: Missing required elements.');
				return;
			}

			this.init();
		}

		init() {
			this.bindEvents();
			this.updateCarousel();
			this.startAutoPlay();
		}

		bindEvents() {
			this.prevBtn.addEventListener('click', () => this.goTo(this.currentIndex - 1));
			this.nextBtn.addEventListener('click', () => this.goTo(this.currentIndex + 1));

			// Pointer events for unified mouse and touch
			this.track.addEventListener('pointerdown', this.handlePointerDown.bind(this));
			this.track.addEventListener('pointermove', this.handlePointerMove.bind(this));
			this.track.addEventListener('pointerup', this.handlePointerUp.bind(this));
			this.track.addEventListener('pointerleave', this.handlePointerUp.bind(this));

			// Pause autoplay on interaction
			this.carouselElement.addEventListener('mouseenter', () => this.pauseAutoPlay());
			this.carouselElement.addEventListener('mouseleave', () => this.resumeAutoPlay());
			this.carouselElement.addEventListener('focusin', () => this.pauseAutoPlay());
			this.carouselElement.addEventListener('focusout', () => this.resumeAutoPlay());
		}

		handlePointerDown(e) {
			if (e.button !== 0) return; // Only main button
			this.isDragging = true;
			this.startX = e.clientX;
			this.track.style.transition = 'none';
			this.track.style.cursor = 'grabbing';
			this.track.setPointerCapture(e.pointerId);
			this.pauseAutoPlay();
		}

		handlePointerMove(e) {
			if (!this.isDragging) return;
			this.currentX = e.clientX;
			const diff = this.currentX - this.startX;
			const baseTranslate = -this.currentIndex * this.cards[0].offsetWidth;
			this.track.style.transform = `translateX(${baseTranslate + diff}px)`;
		}

		handlePointerUp(e) {
			if (!this.isDragging) return;
			this.isDragging = false;
			this.track.style.transition = 'transform 0.5s ease';
			this.track.style.cursor = 'grab';
			this.track.releasePointerCapture(e.pointerId);

			const dragDistance = this.currentX - this.startX;

			if (Math.abs(dragDistance) > this.dragThreshold) {
				if (dragDistance < 0) {
					this.goTo(this.currentIndex + 1);
				} else {
					this.goTo(this.currentIndex - 1);
				}
			} else {
				this.updateCarousel(); // Snap back to current
			}

			this.resumeAutoPlay();
		}

		goTo(index) {
			// Infinite loop logic
			this.currentIndex = (index + this.totalCards) % this.totalCards;
			this.updateCarousel();
		}

		updateCarousel() {
			const cardWidth = this.cards[0].offsetWidth;
			const translateX = -this.currentIndex * cardWidth;
			this.track.style.transform = `translateX(${translateX}px)`;
			// No need to update buttons for an infinite carousel
		}

		startAutoPlay() {
			if (this.totalCards <= 1) return;
			this.isAutoPlaying = true;
			this.autoPlayInterval = setInterval(() => {
				if (this.isAutoPlaying) {
					this.goTo(this.currentIndex + 1);
				}
			}, 5000);
		}

		pauseAutoPlay() {
			this.isAutoPlaying = false;
		}

		resumeAutoPlay() {
			// Use a timeout to prevent immediate resume after interaction
			setTimeout(() => {
				this.isAutoPlaying = true;
			}, 1500);
		}

		destroy() {
			if (this.autoPlayInterval) {
				clearInterval(this.autoPlayInterval);
			}
			// Remove event listeners if component can be destroyed
		}
	}

	document.addEventListener('DOMContentLoaded', () => {
		const carousel = document.querySelector('.testimonials-carousel');
		if (carousel) {
			new TestimonialsCarousel(carousel);
		}
	});
</script>