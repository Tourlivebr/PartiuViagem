---
interface Props {
  placeholder?: string;
}

const { placeholder = "Buscar por destino ou data..." } = Astro.props;
---

<div class="search-container">
  <div class="search-wrapper">
    <input 
      type="text" 
      id="searchDestinos" 
      placeholder={placeholder}
      class="search-input"
    />
    <button id="searchButton" class="search-button" aria-label="Pesquisar">
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="11" cy="11" r="8"></circle>
        <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
      </svg>
    </button>
  </div>
</div>

<style>
  .search-container {
    width: 100%;
    max-width: 600px;
    margin: 0 auto 2rem;
    padding: 0 1rem;
  }

  .search-wrapper {
    position: relative;
    display: flex;
    align-items: center;
  }

  .search-input {
    width: 100%;
    padding: 1rem 1.5rem;
    font-size: 1rem;
    border: 2px solid #e2e8f0;
    border-radius: 50px;
    background-color: white;
    transition: all 0.3s ease;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  }

  .search-input:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 4px 20px rgba(59, 130, 246, 0.15);
  }

  .search-button {
    position: absolute;
    right: 1rem;
    padding: 0.5rem;
    background: none;
    border: none;
    color: #64748b;
    cursor: pointer;
    transition: color 0.3s ease;
  }

  .search-button:hover {
    color: #3b82f6;
  }

  .search-input::placeholder {
    color: #94a3b8;
  }

  @media (max-width: 768px) {
    .search-container {
      padding: 0 0.5rem;
    }

    .search-input {
      padding: 0.75rem 1.25rem;
      font-size: 0.875rem;
    }
  }
</style>

<script>
  const searchInput = document.getElementById('searchDestinos');
  const searchButton = document.getElementById('searchButton');

  searchInput?.addEventListener('input', (e) => {
    filterDestinos((e.target as HTMLInputElement).value);
  });

  searchButton?.addEventListener('click', () => {
    filterDestinos((searchInput as HTMLInputElement)?.value || '');
  });

  searchInput?.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      filterDestinos((e.target as HTMLInputElement).value);
    }
  });

  async function filterDestinos(searchTerm: string) {
    const destinosPath = '/src/content/destinos/';
    const normalizedSearch = searchTerm.toLowerCase().trim();
    
    try {
      const response = await fetch('/api/search-destinos', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          searchTerm: normalizedSearch,
          path: destinosPath
        })
      });

      if (!response.ok) {
        throw new Error('Erro na busca');
      }

      const results = await response.json();
      updateDestinosDisplay(results);
    } catch (error) {
      console.error('Erro ao buscar destinos:', error);
    }
  }

  function updateDestinosDisplay(results) {
    const cards = document.querySelectorAll('.destino-card');
    const searchTerm = (document.getElementById('searchDestinos') as HTMLInputElement)?.value.toLowerCase();
    
    if (!searchTerm) {
      cards.forEach(card => {
        const slide = card.closest('.swiper-slide');
        if (slide) {
          slide.style.display = '';
        }
      });
    } else {
      cards.forEach(card => {
        const title = card.querySelector('.card-title')?.textContent?.toLowerCase() || '';
        const date = card.querySelector('.trip-dates span:last-child')?.textContent?.toLowerCase() || '';
        
        const matches = results.some(result => {
          const titleMatch = title.includes(result.title.toLowerCase());
          const dateMatch = result.tripDates.some(tripDate => date.includes(tripDate.toLowerCase()));
          return titleMatch || dateMatch;
        });

        const slide = card.closest('.swiper-slide');
        if (slide) {
          slide.style.display = matches ? '' : 'none';
        }
      });
    }

    // Atualizar o Swiper após a filtragem
    document.querySelectorAll('.swiper').forEach(swiperEl => {
      const swiper = (swiperEl as any).swiper;
      if (swiper) {
        swiper.update();
        swiper.updateSlides();
        swiper.updateProgress();
        swiper.updateSlidesClasses();
        if (swiper.params.loop) {
          swiper.loopDestroy();
          swiper.loopCreate();
          swiper.update();
        }
      }
    });
  }

  // Adicionar evento de input ao campo de busca
  document.addEventListener('astro:page-load', () => {
    const searchInput = document.getElementById('searchDestinos');
    const searchButton = document.getElementById('searchButton');

    if (searchInput && searchButton) {
      // Evento de input para busca em tempo real
      searchInput.addEventListener('input', (e) => {
        const target = e.target as HTMLInputElement;
        filterDestinos(target.value);
      });

      // Evento de clique no botão de pesquisa
      searchButton.addEventListener('click', () => {
        const inputValue = (searchInput as HTMLInputElement).value;
        filterDestinos(inputValue);
      });

      // Evento de pressionar Enter
      searchInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
          const target = e.target as HTMLInputElement;
          filterDestinos(target.value);
        }
      });
    }
  });
</script>