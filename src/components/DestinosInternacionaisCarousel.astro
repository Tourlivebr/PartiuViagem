---
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';

const allDestinos = await getCollection('destinos');
const destinosInternacionais = allDestinos
	.filter(destino => destino.data.country !== 'BRASIL')
	.sort((a, b) => (a.data.order || 0) - (b.data.order || 0));
---

<section class="destinos-section">
	<div class="container">
		<h2 class="section-title">Destinos Internacionais</h2>
		<p class="section-description">
			Explore o mundo com a Partiu Viagens. Descubra culturas fascinantes, paisagens deslumbrantes
			e experi√™ncias √∫nicas em destinos internacionais inesquec√≠veis.
		</p>
		
		<div class="carousel-container">
			<div class="carousel-track" id="carousel-track-internacional">
				{destinosInternacionais.map((destino) => (
					<div class="destino-card">
						<a href={`/destinos/${destino.id}/`} class="card-link">
							{destino.data.isPromo && (
								<div class="promo-badge">PROMO</div>
							)}
							<div class="card-image">
								<Image 
									src={destino.data.featuredImage} 
									alt={destino.data.title}
									width={300}
									height={200}
									class="card-img"
								/>
							</div>
							<div class="card-content">
								<div class="card-info">
									<div class="rating">
										<span class="stars">{'‚òÖ'.repeat(Math.floor(destino.data.rating))}</span>
										<span class="rating-text">{destino.data.rating} ({destino.data.reviewCount} Reviews)</span>
									</div>
									<h3 class="card-title">{destino.data.title}</h3>
									<div class="location">
										<span class="location-icon">üìç</span>
										<span class="location-text">{destino.data.country}</span>
									</div>
								</div>
								<div class="price internacional">
									{destino.data.currency} {destino.data.price.toLocaleString('pt-BR')}
								</div>
							</div>
						</a>
					</div>
				))}
				<!-- Duplicar cards para efeito infinito -->
				{destinosInternacionais.map((destino) => (
					<div class="destino-card">
						<a href={`/destinos/${destino.id}/`} class="card-link">
							{destino.data.isPromo && (
								<div class="promo-badge">PROMO</div>
							)}
							<div class="card-image">
								<Image 
									src={destino.data.featuredImage} 
									alt={destino.data.title}
									width={300}
									height={200}
									class="card-img"
								/>
							</div>
							<div class="card-content">
								<div class="card-info">
									<div class="rating">
										<span class="stars">{'‚òÖ'.repeat(Math.floor(destino.data.rating))}</span>
										<span class="rating-text">{destino.data.rating} ({destino.data.reviewCount} Reviews)</span>
									</div>
									<h3 class="card-title">{destino.data.title}</h3>
									<div class="location">
										<span class="location-icon">üìç</span>
										<span class="location-text">{destino.data.country}</span>
									</div>
								</div>
								<div class="price internacional">
									{destino.data.currency} {destino.data.price.toLocaleString('pt-BR')}
								</div>
							</div>
						</a>
					</div>
				))}
			</div>
		</div>
	</div>
</section>

<style>
	.destinos-section {
		padding: 4rem 0;
		background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
	}

	.container {
		max-width: 1200px;
		margin: 0 auto;
		padding: 0 2rem;
	}

	.section-title {
		font-size: 2.5rem;
		font-weight: bold;
		text-align: center;
		margin-bottom: 1rem;
		color: #2c3e50;
	}

	.section-description {
		font-size: 1.1rem;
		text-align: center;
		max-width: 600px;
		margin: 0 auto 3rem;
		color: #5a6c7d;
		line-height: 1.6;
	}

	.carousel-container {
		overflow: hidden;
		position: relative;
		width: 100%;
	}

	.carousel-track {
		display: flex;
		gap: clamp(1rem, 3vw, 2rem);
		width: fit-content;
		min-width: 0;
	}

	@media (min-width: 1024px) {
		.carousel-track {
			animation: scroll 45s linear infinite;
		}

		.carousel-track:hover {
			animation-play-state: paused;
		}
	}

	@keyframes scroll {
		0% {
			transform: translateX(0);
		}
		100% {
			transform: translateX(-50%);
		}
	}

	@media (max-width: 1023px) {
		.carousel-track {
			cursor: grab;
			user-select: none;
		}
	}

	@media (max-width: 768px) {
		.section-title {
			font-size: 2rem;
		}

		.carousel-track {
			gap: 1rem;
		}
	}

	/* Estilos dos cards */
	.destino-card {
		flex: 0 0 300px;
		background: white;
		border-radius: 16px;
		overflow: hidden;
		box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
		transition: all 0.3s ease;
		position: relative;
		display: flex;
		flex-direction: column;
	}

	.destino-card:hover {
		transform: translateY(-8px);
		box-shadow: 0 15px 35px rgba(0, 0, 0, 0.15);
	}

	.card-link {
		text-decoration: none;
		color: inherit;
		display: flex;
		flex-direction: column;
		height: 100%;
	}

	.promo-badge {
		position: absolute;
		top: 1rem;
		left: 1rem;
		background: #e91e63;
		color: white;
		padding: 0.5rem 1rem;
		border-radius: 20px;
		font-size: 0.875rem;
		font-weight: bold;
		z-index: 2;
	}

	.card-image {
		position: relative;
		height: 200px;
		overflow: hidden;
		flex-shrink: 0;
	}

	.card-img {
		width: 100%;
		height: 100%;
		object-fit: cover;
		transition: transform 0.3s ease;
	}

	.destino-card:hover .card-img {
		transform: scale(1.05);
	}

	.card-content {
		padding: 1.5rem;
		flex: 1;
		display: flex;
		flex-direction: column;
		justify-content: space-between;
	}

	.card-info {
		flex: 1;
	}

	.rating {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		margin-bottom: 0.75rem;
	}

	.stars {
		color: #ffc107;
		font-size: 1rem;
	}

	.rating-text {
		font-size: 0.875rem;
		color: #6c757d;
	}

	.card-title {
		font-size: 1.5rem;
		font-weight: bold;
		margin: 0 0 0.75rem 0;
		color: #2c3e50;
		line-height: 1.3;
		display: -webkit-box;
		-webkit-line-clamp: 2;
		-webkit-box-orient: vertical;
		overflow: hidden;
	}

	.location {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		margin-bottom: 1rem;
		color: #6c757d;
		font-size: 0.95rem;
	}

	.location-icon {
		font-size: 1rem;
	}

	.price {
		font-size: 1.25rem;
		font-weight: bold;
		background: #f8f9fa;
		padding: 0.75rem 1rem;
		border-radius: 8px;
		text-align: center;
		margin-top: auto;
	}

	.price.internacional {
		color: #1976d2;
	}

	@media (max-width: 768px) {
		.card-image {
			height: 180px;
		}

		.card-title {
			font-size: 1.3rem;
		}

		.card-content {
			padding: 1.2rem;
		}

		.price {
			font-size: 1.15rem;
		}
	}

	@media (max-width: 480px) {
		.location {
			font-size: 0.9rem;
		}

		.price {
			font-size: 1.1rem;
		}

		.destino-card {
			flex: 0 0 280px;
			min-width: 280px;
		}

		.card-image {
			height: 160px;
		}

		.card-title {
			font-size: 1.2rem;
			margin-bottom: 0.6rem;
		}

		.card-content {
			padding: 1rem;
		}

		.rating {
			gap: 0.4rem;
			margin-bottom: 0.6rem;
		}

		.stars {
			font-size: 0.9rem;
		}

		.rating-text {
			font-size: 0.8rem;
		}

		.location {
			gap: 0.4rem;
			margin-bottom: 0.8rem;
			font-size: 0.9rem;
		}

		.location-icon {
			font-size: 0.9rem;
		}

		.price {
			font-size: 1rem;
			padding: 0.6rem 0.8rem;
		}
	}
</style>

<script>
	class Carousel {
		constructor(element) {
			this.track = element;
			if (!this.track || window.innerWidth >= 1024) return;

			this.isDragging = false;
			this.startX = 0;
			this.startY = 0;
			this.startTranslate = 0;
			this.currentTranslate = 0;
			this.animationFrameId = null;
			this.contentWidth = 0;
			this.isScrolling = false;

			// Bind methods
			this.onTouchStart = this.onTouchStart.bind(this);
			this.onTouchMove = this.onTouchMove.bind(this);
			this.onTouchEnd = this.onTouchEnd.bind(this);
			this.onPointerDown = this.onPointerDown.bind(this);
			this.onPointerMove = this.onPointerMove.bind(this);
			this.onPointerUp = this.onPointerUp.bind(this);
			this.autoplay = this.autoplay.bind(this);
			this.updatePosition = this.updatePosition.bind(this);

			// Add event listeners for touch and pointer events
			this.track.addEventListener('touchstart', this.onTouchStart, { passive: false });
			this.track.addEventListener('touchmove', this.onTouchMove, { passive: false });
			this.track.addEventListener('touchend', this.onTouchEnd);
			this.track.addEventListener('pointerdown', this.onPointerDown);
			document.addEventListener('pointermove', this.onPointerMove);
			document.addEventListener('pointerup', this.onPointerUp);
			
			this.init();
		}

		init() {
			this.contentWidth = this.track.scrollWidth / 2;
			this.startAutoplay();
		}

		startAutoplay() {
			this.stopAutoplay();
			this.animationFrameId = requestAnimationFrame(this.autoplay);
		}

		stopAutoplay() {
			cancelAnimationFrame(this.animationFrameId);
		}

		autoplay() {
			if (!this.isDragging) {
				this.currentTranslate -= 0.5;
				this.updatePosition();
			}
			this.animationFrameId = requestAnimationFrame(this.autoplay);
		}

		// Touch events for mobile
		onTouchStart(event) {
			if (event.target.closest('a')) return;
			this.isDragging = true;
			this.isScrolling = false;
			const touch = event.touches[0];
			this.startX = touch.clientX;
			this.startY = touch.clientY;

			const transformMatrix = window.getComputedStyle(this.track).getPropertyValue('transform');
			this.startTranslate = transformMatrix !== 'none' ? parseInt(transformMatrix.split(',')[4], 10) : 0;
		}

		onTouchMove(event) {
			if (!this.isDragging) return;
			
			const touch = event.touches[0];
			const deltaX = touch.clientX - this.startX;
			const deltaY = touch.clientY - this.startY;

			// Determine if user is scrolling vertically
			if (!this.isScrolling) {
				if (Math.abs(deltaY) > Math.abs(deltaX)) {
					this.isScrolling = true;
					this.isDragging = false;
					return;
				}
			}

			if (this.isScrolling) return;

			event.preventDefault();
			this.currentTranslate = this.startTranslate + deltaX;
			this.updatePosition();
		}

		onTouchEnd() {
			if (!this.isDragging || this.isScrolling) {
				this.isDragging = false;
				this.isScrolling = false;
				return;
			}
			this.isDragging = false;
			this.isScrolling = false;
		}

		// Pointer events for desktop
		onPointerDown(event) {
			if (event.pointerType === 'touch') return; // Let touch events handle mobile
			if (event.target.closest('a')) return;
			this.isDragging = true;
			this.startX = event.pageX;
			this.track.style.cursor = 'grabbing';
			event.preventDefault();

			const transformMatrix = window.getComputedStyle(this.track).getPropertyValue('transform');
			this.startTranslate = transformMatrix !== 'none' ? parseInt(transformMatrix.split(',')[4], 10) : 0;
		}

		onPointerMove(event) {
			if (!this.isDragging || event.pointerType === 'touch') return;
			const currentX = event.pageX;
			const deltaX = currentX - this.startX;
			this.currentTranslate = this.startTranslate + deltaX;
			this.updatePosition();
		}

		onPointerUp(event) {
			if (!this.isDragging || event.pointerType === 'touch') return;
			this.isDragging = false;
			this.track.style.cursor = 'grab';
		}

		updatePosition() {
			this.track.style.transform = `translateX(${this.currentTranslate}px)`;
			this.checkBoundary();
		}

		checkBoundary() {
			if (this.currentTranslate <= -this.contentWidth) {
				this.currentTranslate += this.contentWidth;
				this.startTranslate += this.contentWidth;
			} else if (this.currentTranslate > 0) {
				this.currentTranslate -= this.contentWidth;
				this.startTranslate -= this.contentWidth;
			}
		}
	}

	document.addEventListener('astro:page-load', () => {
		const track = document.getElementById('carousel-track-internacional');
		if (track) {
			new Carousel(track);
		}
	});
</script>